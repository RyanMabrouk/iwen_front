{"version":3,"file":"static/chunks/2083-a54b98c8dc09c2f6.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/next@14.2.20_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/navigation.js","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.tsx","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/preload-css.tsx","webpack://_N_E/./node_modules/.pnpm/next@14.2.20_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1/node_modules/next/font/google/target.css","webpack://_N_E/./node_modules/.pnpm/@tanstack+query-core@5.62.2/node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js","webpack://_N_E/./node_modules/.pnpm/@tanstack+query-core@5.62.2/node_modules/@tanstack/query-core/build/modern/infiniteQueryObserver.js","webpack://_N_E/./node_modules/.pnpm/@tanstack+query-core@5.62.2/node_modules/@tanstack/query-core/build/modern/queryCache.js","webpack://_N_E/./node_modules/.pnpm/@tanstack+query-core@5.62.2/node_modules/@tanstack/query-core/build/modern/mutationCache.js","webpack://_N_E/./node_modules/.pnpm/@tanstack+query-core@5.62.2/node_modules/@tanstack/query-core/build/modern/queryClient.js","webpack://_N_E/../../src/index.ts","webpack://_N_E/./node_modules/.pnpm/@tanstack+query-core@5.62.2/node_modules/@tanstack/query-core/build/modern/hydration.js","webpack://_N_E/../../src/HydrationBoundary.tsx","webpack://_N_E/../../src/useInfiniteQuery.ts","webpack://_N_E/../../src/useIsFetching.ts","webpack://_N_E/../../src/useMutationState.ts","webpack://_N_E/./node_modules/.pnpm/@tanstack+query-core@5.62.2/node_modules/@tanstack/query-core/build/modern/queriesObserver.js","webpack://_N_E/../../src/useQueries.ts","webpack://_N_E/../../src/useSuspenseInfiniteQuery.ts","webpack://_N_E/../../src/useSuspenseQueries.ts","webpack://_N_E/../../src/useSuspenseQuery.ts","webpack://_N_E/../../src/react.tsx","webpack://_N_E/../../package.json","webpack://_N_E/../../src/queue.ts","webpack://_N_E/../../src/utils.ts","webpack://_N_E/../../src/generic.ts","webpack://_N_E/../../src/nextjs/index.tsx","webpack://_N_E/../../src/react/index.tsx","webpack://_N_E/../../src/nextjs/utils.ts"],"sourcesContent":["export * from \"../client/components/navigation\";\n\n//# sourceMappingURL=navigation.js.map",null,null,"// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Tajawal_07c78f', '__Tajawal_Fallback_07c78f'\",\"fontStyle\":\"normal\"},\"className\":\"__className_07c78f\"};","// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, ensureQueryFn } from \"./utils.js\";\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options;\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n      const oldPages = context.state.data?.pages || [];\n      const oldPageParams = context.state.data?.pageParams || [];\n      let result = { pages: [], pageParams: [] };\n      let currentPage = 0;\n      const fetchFn = async () => {\n        let cancelled = false;\n        const addSignalProperty = (object) => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        };\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions);\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? \"backward\" : \"forward\",\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const page = await queryFn(\n            queryFnContext\n          );\n          const { maxPages } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          const remainingPages = pages ?? oldPages.length;\n          do {\n            const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);\n            if (currentPage > 0 && param == null) {\n              break;\n            }\n            result = await fetchPage(result, param);\n            currentPage++;\n          } while (currentPage < remainingPages);\n        }\n        return result;\n      };\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn,\n            {\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal\n            },\n            query\n          );\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\nfunction getNextPageParam(options, { pages, pageParams }) {\n  const lastIndex = pages.length - 1;\n  return pages.length > 0 ? options.getNextPageParam(\n    pages[lastIndex],\n    pages,\n    pageParams[lastIndex],\n    pageParams\n  ) : void 0;\n}\nfunction getPreviousPageParam(options, { pages, pageParams }) {\n  return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;\n}\nfunction hasNextPage(options, data) {\n  if (!data)\n    return false;\n  return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam)\n    return false;\n  return getPreviousPageParam(options, data) != null;\n}\nexport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior\n};\n//# sourceMappingURL=infiniteQueryBehavior.js.map","// src/infiniteQueryObserver.ts\nimport { QueryObserver } from \"./queryObserver.js\";\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior\n} from \"./infiniteQueryBehavior.js\";\nvar InfiniteQueryObserver = class extends QueryObserver {\n  constructor(client, options) {\n    super(client, options);\n  }\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n  setOptions(options, notifyOptions) {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior()\n      },\n      notifyOptions\n    );\n  }\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n  fetchNextPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: \"forward\" }\n      }\n    });\n  }\n  fetchPreviousPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: \"backward\" }\n      }\n    });\n  }\n  createResult(query, options) {\n    const { state } = query;\n    const parentResult = super.createResult(query, options);\n    const { isFetching, isRefetching, isError, isRefetchError } = parentResult;\n    const fetchDirection = state.fetchMeta?.fetchMore?.direction;\n    const isFetchNextPageError = isError && fetchDirection === \"forward\";\n    const isFetchingNextPage = isFetching && fetchDirection === \"forward\";\n    const isFetchPreviousPageError = isError && fetchDirection === \"backward\";\n    const isFetchingPreviousPage = isFetching && fetchDirection === \"backward\";\n    const result = {\n      ...parentResult,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchNextPageError,\n      isFetchingNextPage,\n      isFetchPreviousPageError,\n      isFetchingPreviousPage,\n      isRefetchError: isRefetchError && !isFetchNextPageError && !isFetchPreviousPageError,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    };\n    return result;\n  }\n};\nexport {\n  InfiniteQueryObserver\n};\n//# sourceMappingURL=infiniteQueryObserver.js.map","// src/queryCache.ts\nimport { hashQueryKeyByOptions, matchQuery } from \"./utils.js\";\nimport { Query } from \"./query.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar QueryCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#queries = /* @__PURE__ */ new Map();\n  }\n  #queries;\n  build(client, options, state) {\n    const queryKey = options.queryKey;\n    const queryHash = options.queryHash ?? hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n    return query;\n  }\n  add(query) {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query);\n      this.notify({\n        type: \"added\",\n        query\n      });\n    }\n  }\n  remove(query) {\n    const queryInMap = this.#queries.get(query.queryHash);\n    if (queryInMap) {\n      query.destroy();\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash);\n      }\n      this.notify({ type: \"removed\", query });\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query);\n      });\n    });\n  }\n  get(queryHash) {\n    return this.#queries.get(queryHash);\n  }\n  getAll() {\n    return [...this.#queries.values()];\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (query) => matchQuery(defaultedFilters, query)\n    );\n  }\n  findAll(filters = {}) {\n    const queries = this.getAll();\n    return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  onFocus() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus();\n      });\n    });\n  }\n  onOnline() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline();\n      });\n    });\n  }\n};\nexport {\n  QueryCache\n};\n//# sourceMappingURL=queryCache.js.map","// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#mutations = /* @__PURE__ */ new Map();\n    this.#mutationId = Date.now();\n  }\n  #mutations;\n  #mutationId;\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    const scope = scopeFor(mutation);\n    const mutations = this.#mutations.get(scope) ?? [];\n    mutations.push(mutation);\n    this.#mutations.set(scope, mutations);\n    this.notify({ type: \"added\", mutation });\n  }\n  remove(mutation) {\n    const scope = scopeFor(mutation);\n    if (this.#mutations.has(scope)) {\n      const mutations = this.#mutations.get(scope)?.filter((x) => x !== mutation);\n      if (mutations) {\n        if (mutations.length === 0) {\n          this.#mutations.delete(scope);\n        } else {\n          this.#mutations.set(scope, mutations);\n        }\n      }\n    }\n    this.notify({ type: \"removed\", mutation });\n  }\n  canRun(mutation) {\n    const firstPendingMutation = this.#mutations.get(scopeFor(mutation))?.find((m) => m.state.status === \"pending\");\n    return !firstPendingMutation || firstPendingMutation === mutation;\n  }\n  runNext(mutation) {\n    const foundMutation = this.#mutations.get(scopeFor(mutation))?.find((m) => m !== mutation && m.state.isPaused);\n    return foundMutation?.continue() ?? Promise.resolve();\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((mutation) => {\n        this.remove(mutation);\n      });\n    });\n  }\n  getAll() {\n    return [...this.#mutations.values()].flat();\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (mutation) => matchMutation(defaultedFilters, mutation)\n    );\n  }\n  findAll(filters = {}) {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused);\n    return notifyManager.batch(\n      () => Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop))\n      )\n    );\n  }\n};\nfunction scopeFor(mutation) {\n  return mutation.options.scope?.id ?? String(mutation.mutationId);\n}\nexport {\n  MutationCache\n};\n//# sourceMappingURL=mutationCache.js.map","// src/queryClient.ts\nimport {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken\n} from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n  constructor(config = {}) {\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */ new Map();\n    this.#mutationDefaults = /* @__PURE__ */ new Map();\n    this.#mountCount = 0;\n  }\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1)\n      return;\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0)\n      return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n  isFetching(filters) {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: \"fetching\" }).length;\n  }\n  isMutating(filters) {\n    return this.#mutationCache.findAll({ ...filters, status: \"pending\" }).length;\n  }\n  getQueryData(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(options.queryHash)?.state.data;\n  }\n  ensureQueryData(options) {\n    const cachedData = this.getQueryData(options.queryKey);\n    if (cachedData === void 0) {\n      return this.fetchQuery(options);\n    } else {\n      const defaultedOptions = this.defaultQueryOptions(options);\n      const query = this.#queryCache.build(this, defaultedOptions);\n      if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n        void this.prefetchQuery(defaultedOptions);\n      }\n      return Promise.resolve(cachedData);\n    }\n  }\n  getQueriesData(filters) {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const defaultedOptions = this.defaultQueryOptions({ queryKey });\n    const query = this.#queryCache.get(\n      defaultedOptions.queryHash\n    );\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (data === void 0) {\n      return void 0;\n    }\n    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options, manual: true });\n  }\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map(({ queryKey }) => [\n        queryKey,\n        this.setQueryData(queryKey, updater, options)\n      ])\n    );\n  }\n  getQueryState(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(\n      options.queryHash\n    )?.state;\n  }\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  cancelQueries(filters, cancelOptions = {}) {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map((query) => query.cancel(defaultedCancelOptions))\n    );\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries(filters, options = {}) {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate();\n      });\n      if (filters?.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n      const refetchFilters = {\n        ...filters,\n        type: filters?.refetchType ?? filters?.type ?? \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  refetchQueries(filters, options = {}) {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {\n        let promise = query.fetch(void 0, fetchOptions);\n        if (!fetchOptions.throwOnError) {\n          promise = promise.catch(noop);\n        }\n        return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n      })\n    );\n    return Promise.all(promises).then(noop);\n  }\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    if (defaultedOptions.retry === void 0) {\n      defaultedOptions.retry = false;\n    }\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query)\n    ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n  ensureInfiniteQueryData(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.ensureQueryData(options);\n  }\n  resumePausedMutations() {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations();\n    }\n    return Promise.resolve();\n  }\n  getQueryCache() {\n    return this.#queryCache;\n  }\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    const result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions);\n      }\n    });\n    return result;\n  }\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    let result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions };\n      }\n    });\n    return result;\n  }\n  defaultQueryOptions(options) {\n    if (options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      );\n    }\n    if (defaultedOptions.refetchOnReconnect === void 0) {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n    if (defaultedOptions.throwOnError === void 0) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n    if (defaultedOptions.enabled !== true && defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false;\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n};\nexport {\n  QueryClient\n};\n//# sourceMappingURL=queryClient.js.map","'use client'\n\nimport * as Devtools from './ReactQueryDevtools'\nimport * as DevtoolsPanel from './ReactQueryDevtoolsPanel'\n\nexport const ReactQueryDevtools: (typeof Devtools)['ReactQueryDevtools'] =\n  process.env.NODE_ENV !== 'development'\n    ? function () {\n        return null\n      }\n    : Devtools.ReactQueryDevtools\n\nexport const ReactQueryDevtoolsPanel: (typeof DevtoolsPanel)['ReactQueryDevtoolsPanel'] =\n  process.env.NODE_ENV !== 'development'\n    ? function () {\n        return null\n      }\n    : DevtoolsPanel.ReactQueryDevtoolsPanel\n","// src/hydration.ts\nfunction defaultTransformerFn(data) {\n  return data;\n}\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...mutation.options.scope && { scope: mutation.options.scope },\n    ...mutation.meta && { meta: mutation.meta }\n  };\n}\nfunction dehydrateQuery(query, serializeData) {\n  return {\n    state: {\n      ...query.state,\n      ...query.state.data !== void 0 && {\n        data: serializeData(query.state.data)\n      }\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...query.state.status === \"pending\" && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (process.env.NODE_ENV !== \"production\") {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`\n          );\n        }\n        return Promise.reject(new Error(\"redacted\"));\n      })\n    },\n    ...query.meta && { meta: query.meta }\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\nfunction dehydrate(client, options = {}) {\n  const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(\n    (mutation) => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []\n  );\n  const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n  const queries = client.getQueryCache().getAll().flatMap(\n    (query) => filterQuery(query) ? [dehydrateQuery(query, serializeData)] : []\n  );\n  return { mutations, queries };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions\n      },\n      state\n    );\n  });\n  queries.forEach(({ queryKey, state, queryHash, meta, promise }) => {\n    let query = queryCache.get(queryHash);\n    const data = state.data === void 0 ? state.data : deserializeData(state.data);\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const { fetchStatus: _ignored, ...serializedState } = state;\n        query.setState({\n          ...serializedState,\n          data\n        });\n      }\n    } else {\n      query = queryCache.build(\n        client,\n        {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: \"idle\"\n        }\n      );\n    }\n    if (promise) {\n      const initialPromise = Promise.resolve(promise).then(deserializeData);\n      void query.fetch(void 0, { initialPromise });\n    }\n  });\n}\nexport {\n  defaultShouldDehydrateMutation,\n  defaultShouldDehydrateQuery,\n  dehydrate,\n  hydrate\n};\n//# sourceMappingURL=hydration.js.map","/* eslint-disable react-compiler/react-compiler */\n\n'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  OmitKeyof,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: OmitKeyof<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: OmitKeyof<\n      Exclude<HydrateOptions['defaultOptions'], undefined>,\n      'mutations'\n    >\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n  const [hydrationQueue, setHydrationQueue] = React.useState<\n    DehydratedState['queries'] | undefined\n  >()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it _must_\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== 'object') {\n        return\n      }\n\n      const queryCache = client.getQueryCache()\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const queries = (state as DehydratedState).queries || []\n\n      const newQueries: DehydratedState['queries'] = []\n      const existingQueries: DehydratedState['queries'] = []\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery)\n        } else {\n          const hydrationIsNewer =\n            dehydratedQuery.state.dataUpdatedAt >\n            existingQuery.state.dataUpdatedAt\n          const queryAlreadyQueued = hydrationQueue?.find(\n            (query) => query.queryHash === dehydratedQuery.queryHash,\n          )\n\n          if (\n            hydrationIsNewer &&\n            (!queryAlreadyQueued ||\n              dehydratedQuery.state.dataUpdatedAt >\n                queryAlreadyQueued.state.dataUpdatedAt)\n          ) {\n            existingQueries.push(dehydratedQuery)\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        // It's actually fine to call this with queries/state that already exists\n        // in the cache, or is older. hydrate() is idempotent for queries.\n        hydrate(client, { queries: newQueries }, optionsRef.current)\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue((prev) =>\n          prev ? [...prev, ...existingQueries] : existingQueries,\n        )\n      }\n    }\n  }, [client, hydrationQueue, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n      setHydrationQueue(undefined)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseInfiniteQueryResult,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n} from './infiniteQueryOptions'\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): DefinedUseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery(\n  options: UseInfiniteQueryOptions,\n  queryClient?: QueryClient,\n) {\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { notifyManager } from '@tanstack/query-core'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport type { QueryClient, QueryFilters } from '@tanstack/query-core'\n\nexport function useIsFetching(\n  filters?: QueryFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  const queryCache = client.getQueryCache()\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => client.isFetching(filters),\n    () => client.isFetching(filters),\n  )\n}\n","/* eslint-disable react-compiler/react-compiler */\n\n'use client'\nimport * as React from 'react'\n\nimport { notifyManager, replaceEqualDeep } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  Mutation,\n  MutationCache,\n  MutationFilters,\n  MutationState,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  return useMutationState(\n    { filters: { ...filters, status: 'pending' } },\n    client,\n  ).length\n}\n\ntype MutationStateOptions<TResult = MutationState> = {\n  filters?: MutationFilters\n  select?: (mutation: Mutation) => TResult\n}\n\nfunction getResult<TResult = MutationState>(\n  mutationCache: MutationCache,\n  options: MutationStateOptions<TResult>,\n): Array<TResult> {\n  return mutationCache\n    .findAll(options.filters)\n    .map(\n      (mutation): TResult =>\n        (options.select ? options.select(mutation) : mutation.state) as TResult,\n    )\n}\n\nexport function useMutationState<TResult = MutationState>(\n  options: MutationStateOptions<TResult> = {},\n  queryClient?: QueryClient,\n): Array<TResult> {\n  const mutationCache = useQueryClient(queryClient).getMutationCache()\n  const optionsRef = React.useRef(options)\n  const result = React.useRef<Array<TResult>>(null)\n  if (!result.current) {\n    result.current = getResult(mutationCache, options)\n  }\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  })\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(() => {\n          const nextResult = replaceEqualDeep(\n            result.current,\n            getResult(mutationCache, optionsRef.current),\n          )\n          if (result.current !== nextResult) {\n            result.current = nextResult\n            notifyManager.schedule(onStoreChange)\n          }\n        }),\n      [mutationCache],\n    ),\n    () => result.current,\n    () => result.current,\n  )!\n}\n","// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter((x) => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = class extends Subscribable {\n  #client;\n  #result;\n  #queries;\n  #options;\n  #observers;\n  #combinedResult;\n  #lastCombine;\n  #lastResult;\n  constructor(client, queries, options) {\n    super();\n    this.#client = client;\n    this.#options = options;\n    this.#queries = [];\n    this.#observers = [];\n    this.#result = [];\n    this.setQueries(queries);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.#observers.forEach((observer) => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options, notifyOptions) {\n    this.#queries = queries;\n    this.#options = options;\n    if (process.env.NODE_ENV !== \"production\") {\n      const queryHashes = queries.map((query) => query.queryHash);\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          \"[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.\"\n        );\n      }\n    }\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers;\n      const newObserverMatches = this.#findMatchingObservers(this.#queries);\n      newObserverMatches.forEach(\n        (match) => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions)\n      );\n      const newObservers = newObserverMatches.map((match) => match.observer);\n      const newResult = newObservers.map(\n        (observer) => observer.getCurrentResult()\n      );\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index]\n      );\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      this.#observers = newObservers;\n      this.#result = newResult;\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result);\n        });\n      });\n      this.#notify();\n    });\n  }\n  getCurrentResult() {\n    return this.#result;\n  }\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return this.#observers;\n  }\n  getOptimisticResult(queries, combine) {\n    const matches = this.#findMatchingObservers(queries);\n    const result = matches.map(\n      (match) => match.observer.getOptimisticResult(match.defaultedQueryOptions)\n    );\n    return [\n      result,\n      (r) => {\n        return this.#combineResult(r ?? result, combine);\n      },\n      () => {\n        return this.#trackResult(result, queries);\n      }\n    ];\n  }\n  #trackResult(result, queries) {\n    const matches = this.#findMatchingObservers(queries);\n    return matches.map((match, index) => {\n      const observerResult = result[index];\n      return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, (accessedProp) => {\n        matches.forEach((m) => {\n          m.observer.trackProp(accessedProp);\n        });\n      }) : observerResult;\n    });\n  }\n  #combineResult(input, combine) {\n    if (combine) {\n      if (!this.#combinedResult || this.#result !== this.#lastResult || combine !== this.#lastCombine) {\n        this.#lastCombine = combine;\n        this.#lastResult = this.#result;\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input)\n        );\n      }\n      return this.#combinedResult;\n    }\n    return input;\n  }\n  #findMatchingObservers(queries) {\n    const prevObserversMap = new Map(\n      this.#observers.map((observer) => [observer.options.queryHash, observer])\n    );\n    const observers = [];\n    queries.forEach((options) => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options);\n      const match = prevObserversMap.get(defaultedOptions.queryHash);\n      if (match) {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        });\n      } else {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: new QueryObserver(this.#client, defaultedOptions)\n        });\n      }\n    });\n    return observers;\n  }\n  #onUpdate(observer, result) {\n    const index = this.#observers.indexOf(observer);\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result);\n      this.#notify();\n    }\n  }\n  #notify() {\n    if (this.hasListeners()) {\n      const previousResult = this.#combinedResult;\n      const newResult = this.#combineResult(\n        this.#trackResult(this.#result, this.#queries),\n        this.#options?.combine\n      );\n      if (previousResult !== newResult) {\n        notifyManager.batch(() => {\n          this.listeners.forEach((listener) => {\n            listener(this.#result);\n          });\n        });\n      }\n    }\n  }\n};\nexport {\n  QueriesObserver\n};\n//# sourceMappingURL=queriesObserver.js.map","'use client'\nimport * as React from 'react'\n\nimport {\n  QueriesObserver,\n  QueryObserver,\n  notifyManager,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefaultError,\n  OmitKeyof,\n  QueriesObserverOptions,\n  QueriesPlaceholderDataFunction,\n  QueryClient,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// `placeholderData` function always gets undefined passed\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = OmitKeyof<\n  UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  'placeholderData'\n> & {\n  placeholderData?: TQueryFnData | QueriesPlaceholderDataFunction<TQueryFnData>\n}\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseQueryOptionsForUseQueries<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseQueryOptionsForUseQueries<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseQueryOptionsForUseQueries<\n                    TQueryFnData,\n                    unknown extends TError ? DefaultError : TError,\n                    unknown extends TData ? TQueryFnData : TData,\n                    TQueryKey\n                  >\n                : // Fallback\n                  UseQueryOptionsForUseQueries\n\n// A defined initialData setting should return a DefinedUseQueryResult rather than UseQueryResult\ntype GetDefinedOrUndefinedQueryResult<T, TData, TError = unknown> = T extends {\n  initialData?: infer TInitialData\n}\n  ? unknown extends TInitialData\n    ? UseQueryResult<TData, TError>\n    : TInitialData extends TData\n      ? DefinedUseQueryResult<TData, TError>\n      : TInitialData extends () => infer TInitialDataResult\n        ? unknown extends TInitialDataResult\n          ? UseQueryResult<TData, TError>\n          : TInitialDataResult extends TData\n            ? DefinedUseQueryResult<TData, TError>\n            : UseQueryResult<TData, TError>\n        : UseQueryResult<TData, TError>\n  : UseQueryResult<TData, TError>\n\ntype GetUseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? GetDefinedOrUndefinedQueryResult<T, TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? GetDefinedOrUndefinedQueryResult<T, TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? GetDefinedOrUndefinedQueryResult<\n                    T,\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : // Fallback\n                  UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryOptionsForUseQueries>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryOptionsForUseQueries<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesOptions<\n            [...Tails],\n            [...TResults, GetUseQueryOptionsForUseQueries<Head>],\n            [...TDepth, 1]\n          >\n        : ReadonlyArray<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseQueryOptionsForUseQueries<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseQueryOptionsForUseQueries<\n                  TQueryFnData,\n                  TError,\n                  TData,\n                  TQueryKey\n                >\n              >\n            : // Fallback\n              Array<UseQueryOptionsForUseQueries>\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? QueriesResults<\n            [...Tails],\n            [...TResults, GetUseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : T extends Array<\n              UseQueryOptionsForUseQueries<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseQueryResult>\n\nexport function useQueries<\n  T extends Array<any>,\n  TCombinedResult = QueriesResults<T>,\n>(\n  {\n    queries,\n    ...options\n  }: {\n    queries: readonly [...QueriesOptions<T>]\n    combine?: (result: QueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((opts) => {\n        const defaultedOptions = client.defaultQueryOptions(\n          opts as QueryObserverOptions,\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, client, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureSuspenseTimers(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new QueriesObserver<TCombinedResult>(\n        client,\n        defaultedQueries,\n        options as QueriesObserverOptions<TCombinedResult>,\n      ),\n  )\n\n  const [optimisticResult, getCombinedResult, trackResult] =\n    observer.getOptimisticResult(\n      defaultedQueries,\n      (options as QueriesObserverOptions<TCombinedResult>).combine,\n    )\n\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? noop\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(\n      defaultedQueries,\n      options as QueriesObserverOptions<TCombinedResult>,\n      {\n        listeners: false,\n      },\n    )\n  }, [defaultedQueries, options, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const opts = defaultedQueries[index]\n\n        if (opts) {\n          const queryObserver = new QueryObserver(client, opts)\n          if (shouldSuspend(opts, result)) {\n            return fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(opts, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) => {\n      const query = defaultedQueries[index]\n      return (\n        query &&\n        getHasError({\n          result,\n          errorResetBoundary,\n          throwOnError: query.throwOnError,\n          query: client.getQueryCache().get(query.queryHash),\n        })\n      )\n    },\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return getCombinedResult(trackResult())\n}\n","'use client'\nimport { InfiniteQueryObserver, skipToken } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type {\n  DefaultError,\n  InfiniteData,\n  InfiniteQueryObserverSuccessResult,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  UseSuspenseInfiniteQueryOptions,\n  UseSuspenseInfiniteQueryResult,\n} from './types'\n\nexport function useSuspenseInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseSuspenseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseSuspenseInfiniteQueryResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if ((options.queryFn as any) === skipToken) {\n      console.error('skipToken is not allowed for useSuspenseInfiniteQuery')\n    }\n  }\n\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n    },\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  ) as InfiniteQueryObserverSuccessResult<TData, TError>\n}\n","'use client'\nimport { skipToken } from '@tanstack/query-core'\nimport { useQueries } from './useQueries'\nimport { defaultThrowOnError } from './suspense'\nimport type { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types'\nimport type {\n  DefaultError,\n  QueryClient,\n  QueryFunction,\n  ThrowOnError,\n} from '@tanstack/query-core'\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\n// Widen the type of the symbol to enable type inference even if skipToken is not immutable.\ntype SkipTokenForUseQueries = symbol\n\ntype GetUseSuspenseQueryOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseSuspenseQueryOptions<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseSuspenseQueryOptions<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseSuspenseQueryOptions<unknown, TError, TData>\n        : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n          T extends [infer TQueryFnData, infer TError, infer TData]\n          ? UseSuspenseQueryOptions<TQueryFnData, TError, TData>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseSuspenseQueryOptions<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseSuspenseQueryOptions<TQueryFnData>\n              : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseSuspenseQueryOptions<\n                    TQueryFnData,\n                    TError,\n                    TData,\n                    TQueryKey\n                  >\n                : T extends {\n                      queryFn?:\n                        | QueryFunction<infer TQueryFnData, infer TQueryKey>\n                        | SkipTokenForUseQueries\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? UseSuspenseQueryOptions<\n                      TQueryFnData,\n                      TError,\n                      TQueryFnData,\n                      TQueryKey\n                    >\n                  : // Fallback\n                    UseSuspenseQueryOptions\n\ntype GetUseSuspenseQueryResult<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseSuspenseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n      ? UseSuspenseQueryResult<TQueryFnData, TError>\n      : T extends { data: infer TData; error?: infer TError }\n        ? UseSuspenseQueryResult<TData, TError>\n        : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n          T extends [any, infer TError, infer TData]\n          ? UseSuspenseQueryResult<TData, TError>\n          : T extends [infer TQueryFnData, infer TError]\n            ? UseSuspenseQueryResult<TQueryFnData, TError>\n            : T extends [infer TQueryFnData]\n              ? UseSuspenseQueryResult<TQueryFnData>\n              : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n                T extends {\n                    queryFn?:\n                      | QueryFunction<infer TQueryFnData, any>\n                      | SkipTokenForUseQueries\n                    select?: (data: any) => infer TData\n                    throwOnError?: ThrowOnError<any, infer TError, any, any>\n                  }\n                ? UseSuspenseQueryResult<\n                    unknown extends TData ? TQueryFnData : TData,\n                    unknown extends TError ? DefaultError : TError\n                  >\n                : T extends {\n                      queryFn?:\n                        | QueryFunction<infer TQueryFnData, any>\n                        | SkipTokenForUseQueries\n                      throwOnError?: ThrowOnError<any, infer TError, any, any>\n                    }\n                  ? UseSuspenseQueryResult<\n                      TQueryFnData,\n                      unknown extends TError ? DefaultError : TError\n                    >\n                  : // Fallback\n                    UseSuspenseQueryResult\n\n/**\n * SuspenseQueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type SuspenseQueriesOptions<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseSuspenseQueryOptions>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseSuspenseQueryOptions<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? SuspenseQueriesOptions<\n            [...Tails],\n            [...TResults, GetUseSuspenseQueryOptions<Head>],\n            [...TDepth, 1]\n          >\n        : Array<unknown> extends T\n          ? T\n          : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n            // use this to infer the param types in the case of Array.map() argument\n            T extends Array<\n                UseSuspenseQueryOptions<\n                  infer TQueryFnData,\n                  infer TError,\n                  infer TData,\n                  infer TQueryKey\n                >\n              >\n            ? Array<\n                UseSuspenseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n              >\n            : // Fallback\n              Array<UseSuspenseQueryOptions>\n\n/**\n * SuspenseQueriesResults reducer recursively maps type param to results\n */\nexport type SuspenseQueriesResults<\n  T extends Array<any>,\n  TResults extends Array<any> = [],\n  TDepth extends ReadonlyArray<number> = [],\n> = TDepth['length'] extends MAXIMUM_DEPTH\n  ? Array<UseSuspenseQueryResult>\n  : T extends []\n    ? []\n    : T extends [infer Head]\n      ? [...TResults, GetUseSuspenseQueryResult<Head>]\n      : T extends [infer Head, ...infer Tails]\n        ? SuspenseQueriesResults<\n            [...Tails],\n            [...TResults, GetUseSuspenseQueryResult<Head>],\n            [...TDepth, 1]\n          >\n        : T extends Array<\n              UseSuspenseQueryOptions<\n                infer TQueryFnData,\n                infer TError,\n                infer TData,\n                any\n              >\n            >\n          ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n            Array<\n              UseSuspenseQueryResult<\n                unknown extends TData ? TQueryFnData : TData,\n                unknown extends TError ? DefaultError : TError\n              >\n            >\n          : // Fallback\n            Array<UseSuspenseQueryResult>\n\nexport function useSuspenseQueries<\n  T extends Array<any>,\n  TCombinedResult = SuspenseQueriesResults<T>,\n>(\n  options: {\n    queries: readonly [...SuspenseQueriesOptions<T>]\n    combine?: (result: SuspenseQueriesResults<T>) => TCombinedResult\n  },\n  queryClient?: QueryClient,\n): TCombinedResult {\n  return useQueries(\n    {\n      ...options,\n      queries: options.queries.map((query) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (query.queryFn === skipToken) {\n            console.error('skipToken is not allowed for useSuspenseQueries')\n          }\n        }\n\n        return {\n          ...query,\n          suspense: true,\n          throwOnError: defaultThrowOnError,\n          enabled: true,\n          placeholderData: undefined,\n        }\n      }),\n    } as any,\n    queryClient,\n  )\n}\n","'use client'\nimport { QueryObserver, skipToken } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type { UseSuspenseQueryOptions, UseSuspenseQueryResult } from './types'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\n\nexport function useSuspenseQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseSuspenseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseSuspenseQueryResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if ((options.queryFn as any) === skipToken) {\n      console.error('skipToken is not allowed for useSuspenseQuery')\n    }\n  }\n\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n      placeholderData: undefined,\n    },\n    QueryObserver,\n    queryClient,\n  ) as UseSuspenseQueryResult<TData, TError>\n}\n","'use client';\nimport { useEffect } from 'react';\nimport { inject, track, pageview } from './generic';\nimport type { AnalyticsProps, BeforeSend, BeforeSendEvent } from './types';\n\n/**\n * Injects the Vercel Web Analytics script into the page head and starts tracking page views. Read more in our [documentation](https://vercel.com/docs/concepts/analytics/package).\n * @param [props] - Analytics options.\n * @param [props.mode] - The mode to use for the analytics script. Defaults to `auto`.\n *  - `auto` - Automatically detect the environment.  Uses `production` if the environment cannot be determined.\n *  - `production` - Always use the production script. (Sends events to the server)\n *  - `development` - Always use the development script. (Logs events to the console)\n * @param [props.debug] - Whether to enable debug logging in development. Defaults to `true`.\n * @param [props.beforeSend] - A middleware function to modify events before they are sent. Should return the event object or `null` to cancel the event.\n * @example\n * ```js\n * import { Analytics } from '@vercel/analytics/react';\n *\n * export default function App() {\n *  return (\n *   <div>\n *    <Analytics />\n *    <h1>My App</h1>\n *  </div>\n * );\n * }\n * ```\n */\nfunction Analytics(\n  props: AnalyticsProps & {\n    framework?: string;\n    route?: string | null;\n    path?: string | null;\n  }\n): null {\n  useEffect(() => {\n    if (props.beforeSend) {\n      window.va?.('beforeSend', props.beforeSend);\n    }\n  }, [props.beforeSend]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only run once\n  useEffect(() => {\n    inject({\n      framework: props.framework || 'react',\n      ...(props.route !== undefined && { disableAutoTrack: true }),\n      ...props,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only run once\n  }, []);\n\n  useEffect(() => {\n    // explicitely track page view, since we disabled auto tracking\n    if (props.route && props.path) {\n      pageview({ route: props.route, path: props.path });\n    }\n  }, [props.route, props.path]);\n\n  return null;\n}\n\nexport { track, Analytics };\nexport type { AnalyticsProps, BeforeSend, BeforeSendEvent };\n","{\n  \"name\": \"@vercel/analytics\",\n  \"version\": \"1.4.1\",\n  \"description\": \"Gain real-time traffic insights with Vercel Web Analytics\",\n  \"keywords\": [\n    \"analytics\",\n    \"vercel\"\n  ],\n  \"repository\": {\n    \"url\": \"github:vercel/analytics\",\n    \"directory\": \"packages/web\"\n  },\n  \"license\": \"MPL-2.0\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"browser\": \"./dist/index.mjs\",\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.js\"\n    },\n    \"./astro\": {\n      \"import\": \"./dist/astro/component.ts\"\n    },\n    \"./next\": {\n      \"browser\": \"./dist/next/index.mjs\",\n      \"import\": \"./dist/next/index.mjs\",\n      \"require\": \"./dist/next/index.js\"\n    },\n    \"./nuxt\": {\n      \"browser\": \"./dist/nuxt/index.mjs\",\n      \"import\": \"./dist/nuxt/index.mjs\",\n      \"require\": \"./dist/nuxt/index.js\"\n    },\n    \"./react\": {\n      \"browser\": \"./dist/react/index.mjs\",\n      \"import\": \"./dist/react/index.mjs\",\n      \"require\": \"./dist/react/index.js\"\n    },\n    \"./remix\": {\n      \"browser\": \"./dist/remix/index.mjs\",\n      \"import\": \"./dist/remix/index.mjs\",\n      \"require\": \"./dist/remix/index.js\"\n    },\n    \"./server\": {\n      \"node\": \"./dist/server/index.js\",\n      \"edge-light\": \"./dist/server/index.mjs\",\n      \"import\": \"./dist/server/index.mjs\",\n      \"require\": \"./dist/server/index.js\",\n      \"default\": \"./dist/server/index.js\"\n    },\n    \"./sveltekit\": {\n      \"svelte\": \"./dist/sveltekit/index.mjs\",\n      \"types\": \"./dist/sveltekit/index.d.ts\"\n    },\n    \"./vue\": {\n      \"browser\": \"./dist/vue/index.mjs\",\n      \"import\": \"./dist/vue/index.mjs\",\n      \"require\": \"./dist/vue/index.js\"\n    }\n  },\n  \"main\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.ts\",\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"dist/index.d.ts\"\n      ],\n      \"next\": [\n        \"dist/next/index.d.ts\"\n      ],\n      \"nuxt\": [\n        \"dist/nuxt/index.d.ts\"\n      ],\n      \"react\": [\n        \"dist/react/index.d.ts\"\n      ],\n      \"remix\": [\n        \"dist/remix/index.d.ts\"\n      ],\n      \"server\": [\n        \"dist/server/index.d.ts\"\n      ],\n      \"sveltekit\": [\n        \"dist/sveltekit/index.d.ts\"\n      ],\n      \"vue\": [\n        \"dist/vue/index.d.ts\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"build\": \"tsup && pnpm copy-astro\",\n    \"copy-astro\": \"cp -R src/astro dist/\",\n    \"dev\": \"pnpm copy-astro && tsup --watch\",\n    \"lint\": \"eslint .\",\n    \"lint-fix\": \"eslint . --fix\",\n    \"test\": \"jest\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"@vercel/eslint-config\"\n    ],\n    \"rules\": {\n      \"tsdoc/syntax\": \"off\"\n    },\n    \"ignorePatterns\": [\n      \"jest.setup.ts\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@jest/globals\": \"^29.7.0\",\n    \"@swc/core\": \"^1.8.0\",\n    \"@swc/jest\": \"^0.2.37\",\n    \"@testing-library/jest-dom\": \"^6.6.3\",\n    \"@testing-library/react\": \"^16.0.1\",\n    \"@types/node\": \"^20.17.6\",\n    \"@types/react\": \"^18.3.12\",\n    \"@vercel/eslint-config\": \"workspace:0.0.0\",\n    \"jest\": \"^29.7.0\",\n    \"jest-environment-jsdom\": \"^29.7.0\",\n    \"server-only\": \"^0.0.1\",\n    \"svelte\": \"^5.1.10\",\n    \"tsup\": \"7.1.0\",\n    \"vue\": \"^3.5.12\",\n    \"vue-router\": \"^4.4.5\"\n  },\n  \"peerDependencies\": {\n    \"@remix-run/react\": \"^2\",\n    \"@sveltejs/kit\": \"^1 || ^2\",\n    \"next\": \">= 13\",\n    \"react\": \"^18 || ^19 || ^19.0.0-rc\",\n    \"svelte\": \">= 4\",\n    \"vue\": \"^3\",\n    \"vue-router\": \"^4\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@remix-run/react\": {\n      \"optional\": true\n    },\n    \"@sveltejs/kit\": {\n      \"optional\": true\n    },\n    \"next\": {\n      \"optional\": true\n    },\n    \"react\": {\n      \"optional\": true\n    },\n    \"svelte\": {\n      \"optional\": true\n    },\n    \"vue\": {\n      \"optional\": true\n    },\n    \"vue-router\": {\n      \"optional\": true\n    }\n  }\n}\n","export const initQueue = (): void => {\n  // initialize va until script is loaded\n  if (window.va) return;\n\n  window.va = function a(...params): void {\n    (window.vaq = window.vaq || []).push(params);\n  };\n};\n","import type { AllowedPropertyValues, Mode } from './types';\n\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined';\n}\n\nfunction detectEnvironment(): 'development' | 'production' {\n  try {\n    const env = process.env.NODE_ENV;\n    if (env === 'development' || env === 'test') {\n      return 'development';\n    }\n  } catch (e) {\n    // do nothing, this is okay\n  }\n  return 'production';\n}\n\nexport function setMode(mode: Mode = 'auto'): void {\n  if (mode === 'auto') {\n    window.vam = detectEnvironment();\n    return;\n  }\n\n  window.vam = mode;\n}\n\nexport function getMode(): Mode {\n  const mode = isBrowser() ? window.vam : detectEnvironment();\n  return mode || 'production';\n}\n\nexport function isProduction(): boolean {\n  return getMode() === 'production';\n}\n\nexport function isDevelopment(): boolean {\n  return getMode() === 'development';\n}\n\nfunction removeKey(\n  key: string,\n  { [key]: _, ...rest }\n): Record<string, unknown> {\n  return rest;\n}\n\nexport function parseProperties(\n  properties: Record<string, unknown> | undefined,\n  options: {\n    strip?: boolean;\n  }\n): Error | Record<string, AllowedPropertyValues> | undefined {\n  if (!properties) return undefined;\n  let props = properties;\n  const errorProperties: string[] = [];\n  for (const [key, value] of Object.entries(properties)) {\n    if (typeof value === 'object' && value !== null) {\n      if (options.strip) {\n        props = removeKey(key, props);\n      } else {\n        errorProperties.push(key);\n      }\n    }\n  }\n\n  if (errorProperties.length > 0 && !options.strip) {\n    throw Error(\n      `The following properties are not valid: ${errorProperties.join(\n        ', '\n      )}. Only strings, numbers, booleans, and null are allowed.`\n    );\n  }\n  return props as Record<string, AllowedPropertyValues>;\n}\n\nexport function computeRoute(\n  pathname: string | null,\n  pathParams: Record<string, string | string[]> | null\n): string | null {\n  if (!pathname || !pathParams) {\n    return pathname;\n  }\n\n  let result = pathname;\n  try {\n    const entries = Object.entries(pathParams);\n    // simple keys must be handled first\n    for (const [key, value] of entries) {\n      if (!Array.isArray(value)) {\n        const matcher = turnValueToRegExp(value);\n        if (matcher.test(result)) {\n          result = result.replace(matcher, `/[${key}]`);\n        }\n      }\n    }\n    // array values next\n    for (const [key, value] of entries) {\n      if (Array.isArray(value)) {\n        const matcher = turnValueToRegExp(value.join('/'));\n        if (matcher.test(result)) {\n          result = result.replace(matcher, `/[...${key}]`);\n        }\n      }\n    }\n    return result;\n  } catch (e) {\n    return pathname;\n  }\n}\n\nfunction turnValueToRegExp(value: string): RegExp {\n  return new RegExp(`/${escapeRegExp(value)}(?=[/?#]|$)`);\n}\n\nfunction escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n","import { name as packageName, version } from '../package.json';\nimport { initQueue } from './queue';\nimport type {\n  AllowedPropertyValues,\n  AnalyticsProps,\n  FlagsDataInput,\n  BeforeSend,\n  BeforeSendEvent,\n} from './types';\nimport {\n  isBrowser,\n  parseProperties,\n  setMode,\n  isDevelopment,\n  isProduction,\n  computeRoute,\n} from './utils';\n\nexport const DEV_SCRIPT_URL =\n  'https://va.vercel-scripts.com/v1/script.debug.js';\nexport const PROD_SCRIPT_URL = '/_vercel/insights/script.js';\n\n/**\n * Injects the Vercel Web Analytics script into the page head and starts tracking page views. Read more in our [documentation](https://vercel.com/docs/concepts/analytics/package).\n * @param [props] - Analytics options.\n * @param [props.mode] - The mode to use for the analytics script. Defaults to `auto`.\n *  - `auto` - Automatically detect the environment.  Uses `production` if the environment cannot be determined.\n *  - `production` - Always use the production script. (Sends events to the server)\n *  - `development` - Always use the development script. (Logs events to the console)\n * @param [props.debug] - Whether to enable debug logging in development. Defaults to `true`.\n * @param [props.beforeSend] - A middleware function to modify events before they are sent. Should return the event object or `null` to cancel the event.\n * @param [props.dsn] - The DSN of the project to send events to. Only required when self-hosting.\n * @param [props.disableAutoTrack] - Whether the injected script should track page views from pushState events. Disable if route is updated after pushState, a manually call page pageview().\n */\nfunction inject(\n  props: AnalyticsProps & {\n    framework?: string;\n    disableAutoTrack?: boolean;\n  } = {\n    debug: true,\n  }\n): void {\n  if (!isBrowser()) return;\n\n  setMode(props.mode);\n\n  initQueue();\n\n  if (props.beforeSend) {\n    window.va?.('beforeSend', props.beforeSend);\n  }\n\n  const src =\n    props.scriptSrc || (isDevelopment() ? DEV_SCRIPT_URL : PROD_SCRIPT_URL);\n\n  if (document.head.querySelector(`script[src*=\"${src}\"]`)) return;\n\n  const script = document.createElement('script');\n  script.src = src;\n  script.defer = true;\n  script.dataset.sdkn =\n    packageName + (props.framework ? `/${props.framework}` : '');\n  script.dataset.sdkv = version;\n\n  if (props.disableAutoTrack) {\n    script.dataset.disableAutoTrack = '1';\n  }\n  if (props.endpoint) {\n    script.dataset.endpoint = props.endpoint;\n  }\n  if (props.dsn) {\n    script.dataset.dsn = props.dsn;\n  }\n\n  script.onerror = (): void => {\n    const errorMessage = isDevelopment()\n      ? 'Please check if any ad blockers are enabled and try again.'\n      : 'Be sure to enable Web Analytics for your project and deploy again. See https://vercel.com/docs/analytics/quickstart for more information.';\n\n    // eslint-disable-next-line no-console -- Logging to console is intentional\n    console.log(\n      `[Vercel Web Analytics] Failed to load script from ${src}. ${errorMessage}`\n    );\n  };\n\n  if (isDevelopment() && props.debug === false) {\n    script.dataset.debug = 'false';\n  }\n\n  document.head.appendChild(script);\n}\n\n/**\n * Tracks a custom event. Please refer to the [documentation](https://vercel.com/docs/concepts/analytics/custom-events) for more information on custom events.\n * @param name - The name of the event.\n * * Examples: `Purchase`, `Click Button`, or `Play Video`.\n * @param [properties] - Additional properties of the event. Nested objects are not supported. Allowed values are `string`, `number`, `boolean`, and `null`.\n */\nfunction track(\n  name: string,\n  properties?: Record<string, AllowedPropertyValues>,\n  options?: {\n    flags?: FlagsDataInput;\n  }\n): void {\n  if (!isBrowser()) {\n    const msg =\n      '[Vercel Web Analytics] Please import `track` from `@vercel/analytics/server` when using this function in a server environment';\n\n    if (isProduction()) {\n      // eslint-disable-next-line no-console -- Show warning in production\n      console.warn(msg);\n    } else {\n      throw new Error(msg);\n    }\n\n    return;\n  }\n\n  if (!properties) {\n    window.va?.('event', { name, options });\n    return;\n  }\n\n  try {\n    const props = parseProperties(properties, {\n      strip: isProduction(),\n    });\n\n    window.va?.('event', {\n      name,\n      data: props,\n      options,\n    });\n  } catch (err) {\n    if (err instanceof Error && isDevelopment()) {\n      // eslint-disable-next-line no-console -- Logging to console is intentional\n      console.error(err);\n    }\n  }\n}\n\nfunction pageview({\n  route,\n  path,\n}: {\n  route?: string | null;\n  path?: string;\n}): void {\n  window.va?.('pageview', { route, path });\n}\n\nexport { inject, track, pageview, computeRoute };\nexport type { AnalyticsProps, BeforeSend, BeforeSendEvent };\n\n// eslint-disable-next-line import/no-default-export -- Default export is intentional\nexport default {\n  inject,\n  track,\n  computeRoute,\n};\n","import React, { Suspense } from 'react';\nimport { SpeedInsights as SpeedInsightsScript } from '../react';\nimport type { SpeedInsightsProps } from '../types';\nimport { useRoute } from './utils';\n\ntype Props = Omit<SpeedInsightsProps, 'route'>;\n\nfunction SpeedInsightsComponent(props: Props): React.ReactElement {\n  const route = useRoute();\n\n  return <SpeedInsightsScript route={route} {...props} framework=\"next\" />;\n}\n\nexport function SpeedInsights(props: Props): null {\n  // Because of incompatible types between ReactNode in React 19 and React 18 we return null (which is also what we render)\n  return (\n    <Suspense fallback={null}>\n      <SpeedInsightsComponent {...props} />\n    </Suspense>\n  ) as never;\n}\n","'use client';\nimport { useEffect, useRef } from 'react';\nimport type { SpeedInsightsProps } from '../types';\nimport { computeRoute, injectSpeedInsights } from '../generic';\n\nexport function SpeedInsights(\n  props: SpeedInsightsProps & {\n    framework?: string;\n  },\n): JSX.Element | null {\n  useEffect(() => {\n    if (props.beforeSend) {\n      window.si?.('beforeSend', props.beforeSend);\n    }\n  }, [props.beforeSend]);\n\n  const setScriptRoute = useRef<((path: string) => void) | null>(null);\n  useEffect(() => {\n    if (!setScriptRoute.current) {\n      const script = injectSpeedInsights({\n        framework: props.framework || 'react',\n        ...props,\n      });\n      if (script) {\n        setScriptRoute.current = script.setRoute;\n      }\n    } else if (props.route) {\n      setScriptRoute.current(props.route);\n    }\n  }, [props.route]);\n\n  return null;\n}\n\nexport { computeRoute };\n","'use client';\n/* eslint-disable @typescript-eslint/no-unnecessary-condition -- can be empty in pages router */\nimport { useParams, usePathname, useSearchParams } from 'next/navigation.js';\nimport { computeRoute } from '../utils';\n\nexport const useRoute = (): string | null => {\n  const params = useParams();\n  const searchParams = useSearchParams() || new URLSearchParams();\n  const path = usePathname();\n  // Until we have route parameters, we don't compute the route\n  if (!params) {\n    return null;\n  }\n  // in Next.js@13, useParams() could return an empty object for pages router, and we default to searchParams.\n  const finalParams = Object.keys(params).length\n    ? params\n    : Object.fromEntries(searchParams.entries());\n  return computeRoute(path, finalParams);\n};\n"],"names":["_bailouttocsr","require","BailoutToCSR","children","reason","window","param","BailoutToCSRError","_requestasyncstorageexternal","PreloadCss","moduleIds","allFiles","getExpectedRequestStore","requestStore","manifest","reactLoadableManifest","key","cssFiles","push","length","map","file","_jsxruntime","jsx","rel","href","as","assetPrefix","encodeURI","module","exports","infiniteQueryBehavior","pages","onFetch","context","query","options","direction","fetchOptions","meta","fetchMore","oldPages","state","data","oldPageParams","pageParams","result","currentPage","fetchFn","cancelled","addSignalProperty","Object","defineProperty","object","enumerable","get","signal","aborted","addEventListener","queryFn","_utils_js__WEBPACK_IMPORTED_MODULE_0__","cG","fetchPage","previous","Promise","reject","resolve","queryFnContext","queryKey","pageParam","page","maxPages","addTo","Ht","VX","oldData","pageParamFn","getPreviousPageParam","getNextPageParam","remainingPages","initialPageParam","persister","lastIndex","hasNextPage","hasPreviousPage","InfiniteQueryObserver","_queryObserver_js__WEBPACK_IMPORTED_MODULE_0__","z","constructor","client","bindMethods","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","_infiniteQueryBehavior_js__WEBPACK_IMPORTED_MODULE_1__","Gm","getOptimisticResult","fetch","createResult","parentResult","isFetching","isRefetching","isError","isRefetchError","fetchDirection","fetchMeta","isFetchNextPageError","isFetchingNextPage","isFetchPreviousPageError","isFetchingPreviousPage","Qy","ZF","QueryCache","subscribable","l","config","queries","Map","build","queryHash","utils","Rm","modern_query","A","cache","defaultQueryOptions","defaultOptions","getQueryDefaults","add","has","set","notify","type","remove","queryInMap","destroy","delete","clear","notifyManager","V","batch","getAll","forEach","values","find","filters","defaultedFilters","exact","_x","findAll","keys","filter","event","listeners","listener","onFocus","onOnline","MutationCache","mutations","mutationId","Date","now","mutation","modern_mutation","m","mutationCache","defaultMutationOptions","scope","scopeFor","x","canRun","firstPendingMutation","status","runNext","foundMutation","isPaused","continue","flat","X7","resumePausedMutations","pausedMutations","all","catch","ZT","id","String","QueryClient","queryCache","queryDefaults","mutationDefaults","mountCount","unsubscribeFocus","unsubscribeOnline","mount","focusManager","j","subscribe","focused","onlineManager","N","online","unmount","fetchStatus","isMutating","getQueryData","ensureQueryData","cachedData","fetchQuery","defaultedOptions","revalidateIfStale","isStaleByTime","KC","staleTime","prefetchQuery","getQueriesData","setQueryData","updater","prevData","SE","setData","manual","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","reset","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","revert","cancel","then","invalidateQueries","invalidate","refetchType","cancelRefetch","isDisabled","promise","throwOnError","retry","fetchInfiniteQuery","prefetchInfiniteQuery","ensureInfiniteQueryData","isOnline","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","Ym","defaults","to","queryDefault","assign","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","refetchOnReconnect","networkMode","suspense","enabled","CN","ReactQueryDevtools","defaultTransformerFn","hydrate","dehydratedState","deserializeData","mutationOptions","dataUpdatedAt","_ignored","serializedState","setState","initialPromise","HydrationBoundary","queryClient","useQueryClient","hydrationQueue","setHydrationQueue","React","optionsRef","current","newQueries","existingQueries","dehydratedQuery","existingQuery","hydrationIsNewer","queryAlreadyQueued","prev","useInfiniteQuery","useBaseQuery","useIsFetching","batchCalls","onStoreChange","useIsMutating","useMutationState","getResult","select","nextResult","replaceEqualDeep","schedule","difference","array1","array2","includes","QueriesObserver","observers","combinedResult","lastCombine","lastResult","setQueries","onSubscribe","size","observer","onUpdate","onUnsubscribe","Set","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","getQueries","getCurrentQuery","getObservers","combine","matches","combineResult","r","trackResult","observerResult","notifyOnChangeProps","trackProp","accessedProp","input","Q$","prevObserversMap","modern_queryObserver","indexOf","replaceAt","array","value","copy","slice","previousResult","useQueries","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedQueries","opts","_optimisticResults","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","optimisticResult","getCombinedResult","noop","suspensePromises","shouldAtLeastOneSuspend","shouldSuspend","flatMap","queryObserver","QueryObserver","fetchOptimistic","willFetch","firstSingleResultWhichShouldThrow","getHasError","error","useSuspenseInfiniteQuery","defaultThrowOnError","useSuspenseQueries","placeholderData","useSuspenseQuery","initQueue","va","_len","arguments","params","_key","vaq","isBrowser","detectEnvironment","isDevelopment","getMode","mode","vam","Analytics","props","useEffect","_a","beforeSend","call","inject","debug","setMode","src","scriptSrc","PROD_SCRIPT_URL","document","head","querySelector","concat","script","createElement","defer","dataset","sdkn","name","framework","sdkv","disableAutoTrack","endpoint","dsn","onerror","appendChild","route","path","pageview","si","siq","turnValueToRegExp","RegExp","string","replace","SCRIPT_URL","DEV_SCRIPT_URL","SpeedInsights","setScriptRoute","useRef","injectSpeedInsights","isSelfHosted","Boolean","PROXY_SCRIPT_URL","sampleRate","toString","setRoute","useRoute","useParams","searchParams","useSearchParams","URLSearchParams","usePathname","computeRoute","pathname","pathParams","entries","Array","isArray","matcher","test","join","e","fromEntries","SpeedInsightsComponent","Suspense","fallback"],"sourceRoot":""}