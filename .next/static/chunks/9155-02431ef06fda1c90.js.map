{"version":3,"file":"static/chunks/9155-02431ef06fda1c90.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/next@14.2.20_@babel+core@7.26.0_@opentelemetry+api@1.9.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/api/navigation.js","webpack://_N_E/../src/Presence.tsx","webpack://_N_E/../src/useStateMachine.tsx","webpack://_N_E/../src/ScrollArea.tsx","webpack://_N_E/../src/useStateMachine.ts"],"sourcesContent":["export * from \"../client/components/navigation\";\n\n//# sourceMappingURL=navigation.js.map","import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useStateMachine } from './useStateMachine';\n\ninterface PresenceProps {\n  children: React.ReactElement | ((props: { present: boolean }) => React.ReactElement);\n  present: boolean;\n}\n\nconst Presence: React.FC<PresenceProps> = (props) => {\n  const { present, children } = props;\n  const presence = usePresence(present);\n\n  const child = (\n    typeof children === 'function'\n      ? children({ present: presence.isPresent })\n      : React.Children.only(children)\n  ) as React.ReactElement;\n\n  const ref = useComposedRefs(presence.ref, getElementRef(child));\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? React.cloneElement(child, { ref }) : null;\n};\n\nPresence.displayName = 'Presence';\n\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\n\nfunction usePresence(present: boolean) {\n  const [node, setNode] = React.useState<HTMLElement>();\n  const stylesRef = React.useRef<CSSStyleDeclaration>({} as any);\n  const prevPresentRef = React.useRef(present);\n  const prevAnimationNameRef = React.useRef<string>('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = useStateMachine(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended',\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted',\n    },\n    unmounted: {\n      MOUNT: 'mounted',\n    },\n  });\n\n  React.useEffect(() => {\n    const currentAnimationName = getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n\n  useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = getAnimationName(styles);\n\n      if (present) {\n        send('MOUNT');\n      } else if (currentAnimationName === 'none' || styles?.display === 'none') {\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');\n      } else {\n        /**\n         * When `present` changes to `false`, we check changes to animation-name to\n         * determine whether an animation has started. We chose this approach (reading\n         * computed styles) because there is no `animationrun` event and `animationstart`\n         * fires after `animation-delay` has expired which would be too late.\n         */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n\n        if (wasPresent && isAnimating) {\n          send('ANIMATION_OUT');\n        } else {\n          send('UNMOUNT');\n        }\n      }\n\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n\n  useLayoutEffect(() => {\n    if (node) {\n      let timeoutId: number;\n      const ownerWindow = node.ownerDocument.defaultView ?? window;\n      /**\n       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n       * make sure we only trigger ANIMATION_END for the currently active animation.\n       */\n      const handleAnimationEnd = (event: AnimationEvent) => {\n        const currentAnimationName = getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node && isCurrentAnimation) {\n          // With React 18 concurrency this update is applied a frame after the\n          // animation ends, creating a flash of visible content. By setting the\n          // animation fill mode to \"forwards\", we force the node to keep the\n          // styles of the last keyframe, removing the flash.\n          //\n          // Previously we flushed the update via ReactDom.flushSync, but with\n          // exit animations this resulted in the node being removed from the\n          // DOM before the synthetic animationEnd event was dispatched, meaning\n          // user-provided event handlers would not be called.\n          // https://github.com/radix-ui/primitives/pull/1849\n          send('ANIMATION_END');\n          if (!prevPresentRef.current) {\n            const currentFillMode = node.style.animationFillMode;\n            node.style.animationFillMode = 'forwards';\n            // Reset the style after the node had time to unmount (for cases\n            // where the component chooses not to unmount). Doing this any\n            // sooner than `setTimeout` (e.g. with `requestAnimationFrame`)\n            // still causes a flash.\n            timeoutId = ownerWindow.setTimeout(() => {\n              if (node.style.animationFillMode === 'forwards') {\n                node.style.animationFillMode = currentFillMode;\n              }\n            });\n          }\n        }\n      };\n      const handleAnimationStart = (event: AnimationEvent) => {\n        if (event.target === node) {\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n        }\n      };\n      node.addEventListener('animationstart', handleAnimationStart);\n      node.addEventListener('animationcancel', handleAnimationEnd);\n      node.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        ownerWindow.clearTimeout(timeoutId);\n        node.removeEventListener('animationstart', handleAnimationStart);\n        node.removeEventListener('animationcancel', handleAnimationEnd);\n        node.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else {\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n    }\n  }, [node, send]);\n\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: React.useCallback((node: HTMLElement) => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, []),\n  };\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getAnimationName(styles?: CSSStyleDeclaration) {\n  return styles?.animationName || 'none';\n}\n\n// Before React 19 accessing `element.props.ref` will throw a warning and suggest using `element.ref`\n// After React 19 accessing `element.ref` does the opposite.\n// https://github.com/facebook/react/pull/28348\n//\n// Access the ref using the method that doesn't yield a warning.\nfunction getElementRef(element: React.ReactElement) {\n  // React <=18 in DEV\n  let getter = Object.getOwnPropertyDescriptor(element.props, 'ref')?.get;\n  let mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return (element as any).ref;\n  }\n\n  // React 19 in DEV\n  getter = Object.getOwnPropertyDescriptor(element, 'ref')?.get;\n  mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n\n  // Not DEV\n  return element.props.ref || (element as any).ref;\n}\n\nexport { Presence };\nexport type { PresenceProps };\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n","/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useStateMachine } from './useStateMachine';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Sizes = {\n  content: number;\n  viewport: number;\n  scrollbar: {\n    size: number;\n    paddingStart: number;\n    paddingEnd: number;\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_AREA_NAME = 'ScrollArea';\n\ntype ScopedProps<P> = P & { __scopeScrollArea?: Scope };\nconst [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\n\ntype ScrollAreaContextValue = {\n  type: 'auto' | 'always' | 'scroll' | 'hover';\n  dir: Direction;\n  scrollHideDelay: number;\n  scrollArea: ScrollAreaElement | null;\n  viewport: ScrollAreaViewportElement | null;\n  onViewportChange(viewport: ScrollAreaViewportElement | null): void;\n  content: HTMLDivElement | null;\n  onContentChange(content: HTMLDivElement): void;\n  scrollbarX: ScrollAreaScrollbarElement | null;\n  onScrollbarXChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange(rendered: boolean): void;\n  scrollbarY: ScrollAreaScrollbarElement | null;\n  onScrollbarYChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange(rendered: boolean): void;\n  onCornerWidthChange(width: number): void;\n  onCornerHeightChange(height: number): void;\n};\n\nconst [ScrollAreaProvider, useScrollAreaContext] =\n  createScrollAreaContext<ScrollAreaContextValue>(SCROLL_AREA_NAME);\n\ntype ScrollAreaElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ScrollAreaProps extends PrimitiveDivProps {\n  type?: ScrollAreaContextValue['type'];\n  dir?: ScrollAreaContextValue['dir'];\n  scrollHideDelay?: number;\n}\n\nconst ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>(\n  (props: ScopedProps<ScrollAreaProps>, forwardedRef) => {\n    const {\n      __scopeScrollArea,\n      type = 'hover',\n      dir,\n      scrollHideDelay = 600,\n      ...scrollAreaProps\n    } = props;\n    const [scrollArea, setScrollArea] = React.useState<ScrollAreaElement | null>(null);\n    const [viewport, setViewport] = React.useState<ScrollAreaViewportElement | null>(null);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const [scrollbarX, setScrollbarX] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [scrollbarY, setScrollbarY] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [cornerWidth, setCornerWidth] = React.useState(0);\n    const [cornerHeight, setCornerHeight] = React.useState(0);\n    const [scrollbarXEnabled, setScrollbarXEnabled] = React.useState(false);\n    const [scrollbarYEnabled, setScrollbarYEnabled] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));\n    const direction = useDirection(dir);\n\n    return (\n      <ScrollAreaProvider\n        scope={__scopeScrollArea}\n        type={type}\n        dir={direction}\n        scrollHideDelay={scrollHideDelay}\n        scrollArea={scrollArea}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        content={content}\n        onContentChange={setContent}\n        scrollbarX={scrollbarX}\n        onScrollbarXChange={setScrollbarX}\n        scrollbarXEnabled={scrollbarXEnabled}\n        onScrollbarXEnabledChange={setScrollbarXEnabled}\n        scrollbarY={scrollbarY}\n        onScrollbarYChange={setScrollbarY}\n        scrollbarYEnabled={scrollbarYEnabled}\n        onScrollbarYEnabledChange={setScrollbarYEnabled}\n        onCornerWidthChange={setCornerWidth}\n        onCornerHeightChange={setCornerHeight}\n      >\n        <Primitive.div\n          dir={direction}\n          {...scrollAreaProps}\n          ref={composedRefs}\n          style={{\n            position: 'relative',\n            // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n            ['--radix-scroll-area-corner-width' as any]: cornerWidth + 'px',\n            ['--radix-scroll-area-corner-height' as any]: cornerHeight + 'px',\n            ...props.style,\n          }}\n        />\n      </ScrollAreaProvider>\n    );\n  }\n);\n\nScrollArea.displayName = SCROLL_AREA_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ScrollAreaViewport';\n\ntype ScrollAreaViewportElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaViewportProps extends PrimitiveDivProps {\n  nonce?: string;\n}\n\nconst ScrollAreaViewport = React.forwardRef<ScrollAreaViewportElement, ScrollAreaViewportProps>(\n  (props: ScopedProps<ScrollAreaViewportProps>, forwardedRef) => {\n    const { __scopeScrollArea, children, nonce, ...viewportProps } = props;\n    const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n    const ref = React.useRef<ScrollAreaViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n          nonce={nonce}\n        />\n        <Primitive.div\n          data-radix-scroll-area-viewport=\"\"\n          {...viewportProps}\n          ref={composedRefs}\n          style={{\n            /**\n             * We don't support `visible` because the intention is to have at least one scrollbar\n             * if this component is used and `visible` will behave like `auto` in that case\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n             *\n             * We don't handle `auto` because the intention is for the native implementation\n             * to be hidden if using this component. We just want to ensure the node is scrollable\n             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n             * the browser from having to work out whether to render native scrollbars or not,\n             * we tell it to with the intention of hiding them in CSS.\n             */\n            overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n            overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n            ...props.style,\n          }}\n        >\n          {/**\n           * `display: table` ensures our content div will match the size of its children in both\n           * horizontal and vertical axis so we can determine if scroll width/height changed and\n           * recalculate thumb sizes. This doesn't account for children with *percentage*\n           * widths that change. We'll wait to see what use-cases consumers come up with there\n           * before trying to resolve it.\n           */}\n          <div ref={context.onContentChange} style={{ minWidth: '100%', display: 'table' }}>\n            {children}\n          </div>\n        </Primitive.div>\n      </>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLLBAR_NAME = 'ScrollAreaScrollbar';\n\ntype ScrollAreaScrollbarElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbar = React.forwardRef<ScrollAreaScrollbarElement, ScrollAreaScrollbarProps>(\n  (props: ScopedProps<ScrollAreaScrollbarProps>, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    React.useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarHoverElement = ScrollAreaScrollbarAutoElement;\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarHover = React.forwardRef<\n  ScrollAreaScrollbarHoverElement,\n  ScrollAreaScrollbarHoverProps\n>((props: ScopedProps<ScrollAreaScrollbarHoverProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarAuto\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarScrollElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarScroll = React.forwardRef<\n  ScrollAreaScrollbarScrollElement,\n  ScrollAreaScrollbarScrollProps\n>((props: ScopedProps<ScrollAreaScrollbarScrollProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = useStateMachine('hidden', {\n    hidden: {\n      SCROLL: 'scrolling',\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting',\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle',\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n\n  React.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n\n  return (\n    <Presence present={forceMount || state !== 'hidden'}>\n      <ScrollAreaScrollbarVisible\n        data-state={state === 'hidden' ? 'hidden' : 'visible'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER'))}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarAutoElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarAuto = React.forwardRef<\n  ScrollAreaScrollbarAutoElement,\n  ScrollAreaScrollbarAutoProps\n>((props: ScopedProps<ScrollAreaScrollbarAutoProps>, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const { forceMount, ...scrollbarProps } = props;\n  const [visible, setVisible] = React.useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarVisible\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarVisibleElement = ScrollAreaScrollbarAxisElement;\ninterface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nconst ScrollAreaScrollbarVisible = React.forwardRef<\n  ScrollAreaScrollbarVisibleElement,\n  ScrollAreaScrollbarVisibleProps\n>((props: ScopedProps<ScrollAreaScrollbarVisibleProps>, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React.useRef<ScrollAreaThumbElement | null>(null);\n  const pointerOffsetRef = React.useRef(0);\n  const [sizes, setSizes] = React.useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  type UncommonProps = 'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll';\n  const commonProps: Omit<ScrollAreaScrollbarAxisPrivateProps, UncommonProps> = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => (thumbRef.current = thumb),\n    onThumbPointerUp: () => (pointerOffsetRef.current = 0),\n    onThumbPointerDown: (pointerPos) => (pointerOffsetRef.current = pointerPos),\n  };\n\n  function getScrollPosition(pointerPos: number, dir?: Direction) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollLeft = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollTop = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarAxisPrivateProps = {\n  hasThumb: boolean;\n  sizes: Sizes;\n  onSizesChange(sizes: Sizes): void;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerDown(pointerPos: number): void;\n  onThumbPointerUp(): void;\n  onThumbPositionChange(): void;\n  onWheelScroll(scrollPos: number): void;\n  onDragScroll(pointerPos: number): void;\n};\n\ntype ScrollAreaScrollbarAxisElement = ScrollAreaScrollbarImplElement;\ninterface ScrollAreaScrollbarAxisProps\n  extends Omit<ScrollAreaScrollbarImplProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarAxisPrivateProps {}\n\nconst ScrollAreaScrollbarX = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"horizontal\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        bottom: 0,\n        left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        ['--radix-scroll-area-thumb-width' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollLeft + event.deltaX;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollWidth,\n            viewport: context.viewport.offsetWidth,\n            scrollbar: {\n              size: ref.current.clientWidth,\n              paddingStart: toInt(computedStyle.paddingLeft),\n              paddingEnd: toInt(computedStyle.paddingRight),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\nconst ScrollAreaScrollbarY = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"vertical\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        top: 0,\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 'var(--radix-scroll-area-corner-height)',\n        ['--radix-scroll-area-thumb-height' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollTop + event.deltaY;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollHeight,\n            viewport: context.viewport.offsetHeight,\n            scrollbar: {\n              size: ref.current.clientHeight,\n              paddingStart: toInt(computedStyle.paddingTop),\n              paddingEnd: toInt(computedStyle.paddingBottom),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollbarContext = {\n  hasThumb: boolean;\n  scrollbar: ScrollAreaScrollbarElement | null;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerUp(): void;\n  onThumbPointerDown(pointerPos: { x: number; y: number }): void;\n  onThumbPositionChange(): void;\n};\n\nconst [ScrollbarProvider, useScrollbarContext] =\n  createScrollAreaContext<ScrollbarContext>(SCROLLBAR_NAME);\n\ntype ScrollAreaScrollbarImplElement = React.ElementRef<typeof Primitive.div>;\ntype ScrollAreaScrollbarImplPrivateProps = {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContext['onThumbChange'];\n  onThumbPointerUp: ScrollbarContext['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContext['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContext['onThumbPositionChange'];\n  onWheelScroll(event: WheelEvent, maxScrollPos: number): void;\n  onDragScroll(pointerPos: { x: number; y: number }): void;\n  onResize(): void;\n};\ninterface ScrollAreaScrollbarImplProps\n  extends Omit<PrimitiveDivProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarImplPrivateProps {}\n\nconst ScrollAreaScrollbarImpl = React.forwardRef<\n  ScrollAreaScrollbarImplElement,\n  ScrollAreaScrollbarImplProps\n>((props: ScopedProps<ScrollAreaScrollbarImplProps>, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React.useState<ScrollAreaScrollbarElement | null>(null);\n  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = React.useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = React.useRef<string>('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event: React.PointerEvent<HTMLElement>) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  }\n\n  /**\n   * We bind wheel event imperatively so we can switch off passive\n   * mode for document wheel event to allow it to be prevented\n   */\n  React.useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  /**\n   * Update thumb position on sizes change\n   */\n  React.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      scope={__scopeScrollArea}\n      scrollbar={scrollbar}\n      hasThumb={hasThumb}\n      onThumbChange={useCallbackRef(onThumbChange)}\n      onThumbPointerUp={useCallbackRef(onThumbPointerUp)}\n      onThumbPositionChange={handleThumbPositionChange}\n      onThumbPointerDown={useCallbackRef(onThumbPointerDown)}\n    >\n      <Primitive.div\n        {...scrollbarProps}\n        ref={composeRefs}\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            // pointer capture doesn't prevent text selection in Safari\n            // so we remove text selection manually when scrolling\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            if (context.viewport) context.viewport.style.scrollBehavior = 'auto';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            element.releasePointerCapture(event.pointerId);\n          }\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          if (context.viewport) context.viewport.style.scrollBehavior = '';\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'ScrollAreaThumb';\n\ntype ScrollAreaThumbElement = ScrollAreaThumbImplElement;\ninterface ScrollAreaThumbProps extends ScrollAreaThumbImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ScrollAreaThumb = React.forwardRef<ScrollAreaThumbElement, ScrollAreaThumbProps>(\n  (props: ScopedProps<ScrollAreaThumbProps>, forwardedRef) => {\n    const { forceMount, ...thumbProps } = props;\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n    return (\n      <Presence present={forceMount || scrollbarContext.hasThumb}>\n        <ScrollAreaThumbImpl ref={forwardedRef} {...thumbProps} />\n      </Presence>\n    );\n  }\n);\n\ntype ScrollAreaThumbImplElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaThumbImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaThumbImpl = React.forwardRef<ScrollAreaThumbImplElement, ScrollAreaThumbImplProps>(\n  (props: ScopedProps<ScrollAreaThumbImplProps>, forwardedRef) => {\n    const { __scopeScrollArea, style, ...thumbProps } = props;\n    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n    const { onThumbPositionChange } = scrollbarContext;\n    const composedRef = useComposedRefs(forwardedRef, (node) =>\n      scrollbarContext.onThumbChange(node)\n    );\n    const removeUnlinkedScrollListenerRef = React.useRef<() => void>();\n    const debounceScrollEnd = useDebounceCallback(() => {\n      if (removeUnlinkedScrollListenerRef.current) {\n        removeUnlinkedScrollListenerRef.current();\n        removeUnlinkedScrollListenerRef.current = undefined;\n      }\n    }, 100);\n\n    React.useEffect(() => {\n      const viewport = scrollAreaContext.viewport;\n      if (viewport) {\n        /**\n         * We only bind to native scroll event so we know when scroll starts and ends.\n         * When scroll starts we start a requestAnimationFrame loop that checks for\n         * changes to scroll position. That rAF loop triggers our thumb position change\n         * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n         * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n         */\n        const handleScroll = () => {\n          debounceScrollEnd();\n          if (!removeUnlinkedScrollListenerRef.current) {\n            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n            removeUnlinkedScrollListenerRef.current = listener;\n            onThumbPositionChange();\n          }\n        };\n        onThumbPositionChange();\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n    return (\n      <Primitive.div\n        data-state={scrollbarContext.hasThumb ? 'visible' : 'hidden'}\n        {...thumbProps}\n        ref={composedRef}\n        style={{\n          width: 'var(--radix-scroll-area-thumb-width)',\n          height: 'var(--radix-scroll-area-thumb-height)',\n          ...style,\n        }}\n        onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n          const thumb = event.target as HTMLElement;\n          const thumbRect = thumb.getBoundingClientRect();\n          const x = event.clientX - thumbRect.left;\n          const y = event.clientY - thumbRect.top;\n          scrollbarContext.onThumbPointerDown({ x, y });\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n      />\n    );\n  }\n);\n\nScrollAreaThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst CORNER_NAME = 'ScrollAreaCorner';\n\ntype ScrollAreaCornerElement = ScrollAreaCornerImplElement;\ninterface ScrollAreaCornerProps extends ScrollAreaCornerImplProps {}\n\nconst ScrollAreaCorner = React.forwardRef<ScrollAreaCornerElement, ScrollAreaCornerProps>(\n  (props: ScopedProps<ScrollAreaCornerProps>, forwardedRef) => {\n    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n    const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n    return hasCorner ? <ScrollAreaCornerImpl {...props} ref={forwardedRef} /> : null;\n  }\n);\n\nScrollAreaCorner.displayName = CORNER_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaCornerImplElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaCornerImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaCornerImpl = React.forwardRef<\n  ScrollAreaCornerImplElement,\n  ScrollAreaCornerImplProps\n>((props: ScopedProps<ScrollAreaCornerImplProps>, forwardedRef) => {\n  const { __scopeScrollArea, ...cornerProps } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(context.scrollbarX, () => {\n    const height = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n\n  useResizeObserver(context.scrollbarY, () => {\n    const width = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n\n  return hasSize ? (\n    <Primitive.div\n      {...cornerProps}\n      ref={forwardedRef}\n      style={{\n        width,\n        height,\n        position: 'absolute',\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 0,\n        ...props.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  // minimum of 18 matches macOS minimum\n  return Math.max(thumbSize, 18);\n}\n\nfunction getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: Direction = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n\nfunction getThumbOffsetFromScroll(scrollPos: number, sizes: Sizes, dir: Direction = 'ltr') {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n\n// Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\nconst addUnlinkedScrollListener = (node: HTMLElement, handler = () => {}) => {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction useDebounceCallback(callback: () => void, delay: number) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ScrollArea;\nconst Viewport = ScrollAreaViewport;\nconst Scrollbar = ScrollAreaScrollbar;\nconst Thumb = ScrollAreaThumb;\nconst Corner = ScrollAreaCorner;\n\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n};\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"],"names":["Presence","Object","getter","mayWarn","present","children","props","presence","usePresence","initialState","machine","node","setNode","React2","stylesRef","prevPresentRef","prevAnimationNameRef","state","send","mounted","UNMOUNT","ANIMATION_OUT","unmountSuspended","MOUNT","ANIMATION_END","unmounted","React","event","nextState","currentAnimationName","getAnimationName","current","useLayoutEffect","styles","wasPresent","prevAnimationName","display","timeoutId","ownerWindow","ownerDocument","defaultView","window","handleAnimationEnd","isCurrentAnimation","includes","animationName","target","currentFillMode","style","animationFillMode","setTimeout","handleAnimationStart","addEventListener","clearTimeout","removeEventListener","isPresent","ref","getComputedStyle","child","only","useComposedRefs","getOwnPropertyDescriptor","element","get","isReactWarning","forceMount","displayName","SCROLL_AREA_NAME","createScrollAreaContext","createScrollAreaScope","createContextScope","ScrollAreaProvider","useScrollAreaContext","ScrollArea","forwardedRef","__scopeScrollArea","type","dir","scrollHideDelay","scrollAreaProps","scrollArea","setScrollArea","viewport","setViewport","content","setContent","scrollbarX","setScrollbarX","scrollbarY","setScrollbarY","cornerWidth","setCornerWidth","cornerHeight","setCornerHeight","scrollbarXEnabled","setScrollbarXEnabled","scrollbarYEnabled","setScrollbarYEnabled","composedRefs","direction","useDirection","jsx","scope","onViewportChange","onContentChange","onScrollbarXChange","onScrollbarXEnabledChange","onScrollbarYChange","onScrollbarYEnabledChange","onCornerWidthChange","onCornerHeightChange","Primitive","div","position","VIEWPORT_NAME","ScrollAreaViewport","nonce","viewportProps","context","jsxs","Fragment","dangerouslySetInnerHTML","__html","overflowX","overflowY","minWidth","SCROLLBAR_NAME","ScrollAreaScrollbar","scrollbarProps","isHorizontal","orientation","ScrollAreaScrollbarHover","ScrollAreaScrollbarScroll","ScrollAreaScrollbarAuto","ScrollAreaScrollbarVisible","visible","setVisible","hideTimer","handlePointerEnter","handlePointerLeave","debounceScrollEnd","useDebounceCallback","hidden","SCROLL","scrolling","SCROLL_END","POINTER_ENTER","interacting","POINTER_LEAVE","idle","HIDE","scrollDirection","prevScrollPos","handleScroll","scrollPos","onPointerEnter","composeEventHandlers","onPointerLeave","handleResize","isOverflowX","offsetWidth","scrollWidth","isOverflowY","offsetHeight","scrollHeight","useResizeObserver","thumbRef","pointerOffsetRef","sizes","setSizes","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","commonProps","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPosition","getScrollPositionFromPointer","pointerOffset","thumbSizePx","getThumbSize","offset","minPointerPos","maxPointerPos","maxScrollPos","interpolate","ScrollAreaScrollbarX","onThumbPositionChange","getThumbOffsetFromScroll","scrollLeft","transform","concat","onWheelScroll","onDragScroll","ScrollAreaScrollbarY","scrollTop","computedStyle","setComputedStyle","composeRefs","ScrollAreaScrollbarImpl","bottom","left","right","x","deltaX","preventDefault","onResize","clientWidth","toInt","paddingLeft","paddingRight","top","y","deltaY","clientHeight","paddingTop","paddingBottom","ScrollbarProvider","useScrollbarContext","setScrollbar","rectRef","prevWebkitUserSelectRef","handleWheelScroll","useCallbackRef","handleThumbPositionChange","handleDragScroll","clientX","clientY","handleWheel","contains","document","passive","onPointerDown","button","setPointerCapture","pointerId","getBoundingClientRect","body","webkitUserSelect","scrollBehavior","onPointerMove","onPointerUp","hasPointerCapture","releasePointerCapture","THUMB_NAME","ScrollAreaThumb","thumbProps","scrollbarContext","ScrollAreaThumbImpl","scrollAreaContext","composedRef","removeUnlinkedScrollListenerRef","listener","addUnlinkedScrollListener","width","height","onPointerDownCapture","thumbRect","CORNER_NAME","ScrollAreaCorner","hasBothScrollbarsVisible","hasCorner","ScrollAreaCornerImpl","cornerProps","setWidth","setHeight","hasSize","value","parseInt","viewportSize","contentSize","ratio","isNaN","scrollbarPadding","Math","max","scrollWithoutMomentum","clamp","linearScale","input","output","handler","prevPosition","rAF","loop","isHorizontalScroll","isVerticalScroll","requestAnimationFrame","cancelAnimationFrame","callback","delay","handleCallback","debounceTimerRef","resizeObserver","ResizeObserver","observe","unobserve","Root","Viewport","Corner"],"sourceRoot":""}